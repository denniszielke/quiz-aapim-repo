<!--
    IMPORTANT:
    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.
    - Only the <forward-request> policy element can appear within the <backend> section element.
    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.
    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.
    - To add a policy position the cursor at the desired insertion point and click on the round button associated with the policy.
    - To remove a policy, delete the corresponding policy statement from the policy document.
    - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.
    - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.
    - Policies are applied in the order of their appearance, from the top down.
-->
<policies>
	<inbound>
		<cors>
			<allowed-origins>
				<origin>*</origin>
				<!-- allow any -->
			</allowed-origins>
			<allowed-methods>
				<!-- allow any -->
				<method>*</method>
			</allowed-methods>
			<allowed-headers>
				<!-- allow any -->
				<header>*</header>
			</allowed-headers>
		</cors>
		<set-backend-service base-url="{{QuizApiBackend}}" />
		<base />
	</inbound>
	<backend>
		<base />
	</backend>
	<outbound>
		<choose>
			<when condition="@(context.Response.StatusCode == 200 && context.Product.Name.Equals("Starter") && context.Operation.Name.Equals("GetAllQuizzes") )">
				<set-body>@{
        				var arrayQuizzes = context.Response.Body.As<JArray>();
        				var newResponse = new JArray();
        				foreach (JObject quizItem in arrayQuizzes)
        				{
        				    
        				    IList<string> keys = quizItem.Properties().Select(p => p.Name).ToList();
        				
            				foreach (var key in new [] {"Questions"}) {
            				    if(keys.Contains(key))
            				    {
            					    quizItem.Property(key).Remove();
 
            					}
            				}
            				newResponse.Add(quizItem);
        				}
        				
        				
        				return newResponse.ToString();
        			}
        		</set-body>
			</when>
		</choose>
		<base />
	</outbound>
</policies>